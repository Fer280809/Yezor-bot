import fetch from 'node-fetch';

const emoji = '‚ú®'; // Puedes cambiar este emoji por el que uses en tu bot

var handler = async (m, { conn, args, usedPrefix, command }) => {
    if (!args[0]) {
        return conn.reply(m.chat, `${emoji} Por favor, ingresa el texto que quieres estilizar.\n\n*Ejemplo:* ${usedPrefix + command} Hola mundo\n\n*Comandos disponibles:*\n‚Ä¢ ${usedPrefix}texto - Genera todos los estilos\n‚Ä¢ ${usedPrefix}simbolos - Solo s√≠mbolos decorativos\n‚Ä¢ ${usedPrefix}letras - Solo estilos de letras`, m);
    }

    const texto = args.join(' ');
    
    if (texto.length > 100) {
        return conn.reply(m.chat, `${emoji} El texto es demasiado largo. M√°ximo 100 caracteres.`, m);
    }

    try {
        await conn.reply(m.chat, `${emoji} Generando estilos de texto...`, m);

        let estilos = [];
        
        if (command === 'simbolos') {
            estilos = await generarSimbolos(texto);
        } else if (command === 'letras') {
            estilos = await generarLetras(texto);
        } else {
            estilos = await generarTodosLosEstilos(texto);
        }

        if (!estilos || estilos.length === 0) {
            return conn.reply(m.chat, "Error: No se pudieron generar los estilos de texto.", m);
        }

        let mensaje = `${emoji} *Texto estilizado:*\n\n`;
        mensaje += `üìù *Original:* ${texto}\n\n`;
        
        estilos.forEach((estilo, index) => {
            mensaje += `${index + 1}. ${estilo}\n\n`;
        });

        // Si el mensaje es muy largo, dividirlo en partes
        if (mensaje.length > 4000) {
            const partes = dividirMensaje(mensaje);
            for (let i = 0; i < partes.length; i++) {
                await conn.reply(m.chat, partes[i], m);
                if (i < partes.length - 1) {
                    await new Promise(resolve => setTimeout(resolve, 1000)); // Pausa de 1 segundo
                }
            }
        } else {
            await conn.reply(m.chat, mensaje, m);
        }

    } catch (error) {
        console.error('Error en comando de texto:', error);
        return conn.reply(m.chat, `Error: ${error.message}`, m);
    }
};

handler.help = ['texto', 'estilo', 'simbolos', 'letras'].map((v) => v + ' *<texto>*');
handler.tags = ['herramientas'];
handler.command = ['texto', 'estilo', 'letras', 'fuente', 'simbolos', 'weirdmaker'];
handler.group = true;
handler.register = true;
handler.coin = 1;
handler.limit = false;

export default handler;

function dividirMensaje(mensaje) {
    const partes = [];
    let parte = "";
    const lineas = mensaje.split('\n');
    
    for (const linea of lineas) {
        if ((parte + linea + '\n').length > 4000) {
            if (parte) partes.push(parte);
            parte = linea + '\n';
        } else {
            parte += linea + '\n';
        }
    }
    if (parte) partes.push(parte);
    return partes;
}

async function generarTodosLosEstilos(texto) {
    const letras = await generarLetras(texto);
    const simbolos = await generarSimbolos(texto);
    return [...letras, ...simbolos];
}

async function generarLetras(texto) {
    const estilos = [];
    
    // Estilo 1: Mathematical Bold
    const negrita = texto.split('').map(char => {
        const code = char.charCodeAt(0);
        if (code >= 65 && code <= 90) return String.fromCharCode(code - 65 + 0x1D400);
        if (code >= 97 && code <= 122) return String.fromCharCode(code - 97 + 0x1D41A);
        if (code >= 48 && code <= 57) return String.fromCharCode(code - 48 + 0x1D7CE);
        return char;
    }).join('');
    estilos.push(`ùêçùêûùê†ùê´ùê¢ùê≠ùêö: ${negrita}`);

    // Estilo 2: Mathematical Italic
    const cursiva = texto.split('').map(char => {
        const code = char.charCodeAt(0);
        if (code >= 65 && code <= 90) return String.fromCharCode(code - 65 + 0x1D434);
        if (code >= 97 && code <= 122) return String.fromCharCode(code - 97 + 0x1D44E);
        return char;
    }).join('');
    estilos.push(`ùê∂ùë¢ùëüùë†ùëñùë£ùëé: ${cursiva}`);

    // Estilo 3: Mathematical Bold Italic
    const negriteursiva = texto.split('').map(char => {
        const code = char.charCodeAt(0);
        if (code >= 65 && code <= 90) return String.fromCharCode(code - 65 + 0x1D468);
        if (code >= 97 && code <= 122) return String.fromCharCode(code - 97 + 0x1D482);
        return char;
    }).join('');
    estilos.push(`ùëµùíÜùíàùíìùíäùíïùíÇ ùë™ùíñùíìùíîùíäùíóùíÇ: ${negriteursiva}`);

    // Estilo 4: Mathematical Sans-Serif
    const sansSerif = texto.split('').map(char => {
        const code = char.charCodeAt(0);
        if (code >= 65 && code <= 90) return String.fromCharCode(code - 65 + 0x1D5A0);
        if (code >= 97 && code <= 122) return String.fromCharCode(code - 97 + 0x1D5BA);
        if (code >= 48 && code <= 57) return String.fromCharCode(code - 48 + 0x1D7E2);
        return char;
    }).join('');
    estilos.push(`ùñ≤ùñ∫ùóáùóå-ùñ≤ùñæùóãùóÇùñø: ${sansSerif}`);

    // Estilo 5: Mathematical Monospace
    const monospace = texto.split('').map(char => {
        const code = char.charCodeAt(0);
        if (code >= 65 && code <= 90) return String.fromCharCode(code - 65 + 0x1D670);
        if (code >= 97 && code <= 122) return String.fromCharCode(code - 97 + 0x1D68A);
        if (code >= 48 && code <= 57) return String.fromCharCode(code - 48 + 0x1D7F6);
        return char;
    }).join('');
    estilos.push(`ùôºùöòùöóùöòùöúùöôùöäùöåùöé: ${monospace}`);

    // Estilo 6: Fullwidth
    const fullwidth = texto.split('').map(char => {
        const code = char.charCodeAt(0);
        if (code >= 33 && code <= 126) return String.fromCharCode(code - 33 + 0xFF01);
        if (code === 32) return String.fromCharCode(0x3000);
        return char;
    }).join('');
    estilos.push(`Ôº¶ÔΩïÔΩåÔΩåÔΩóÔΩâÔΩÑÔΩîÔΩàÔºö ${fullwidth}`);

    // Estilo 7: Peque√±as May√∫sculas
    const peque√±asMayusculas = texto.split('').map(char => {
        const small_caps = {
            'a': '·¥Ä', 'b': ' ô', 'c': '·¥Ñ', 'd': '·¥Ö', 'e': '·¥á', 'f': '“ì', 'g': '…¢',
            'h': ' ú', 'i': '…™', 'j': '·¥ä', 'k': '·¥ã', 'l': ' ü', 'm': '·¥ç', 'n': '…¥',
            'o': '·¥è', 'p': '·¥ò', 'q': '«´', 'r': ' Ä', 's': 's', 't': '·¥õ', 'u': '·¥ú',
            'v': '·¥†', 'w': '·¥°', 'x': 'x', 'y': ' è', 'z': '·¥¢'
        };
        return small_caps[char.toLowerCase()] || char;
    }).join('');
    estilos.push(`·¥ò·¥á«´·¥ú·¥á√±·¥Äs ·¥ç·¥Ä è·¥ús·¥Ñ·¥ú ü·¥Äs: ${peque√±asMayusculas}`);

    // Estilo 8: Texto invertido
    const caracteresMapa = {
        'a': '…ê', 'b': 'q', 'c': '…î', 'd': 'p', 'e': '«ù', 'f': '…ü', 'g': '∆É',
        'h': '…•', 'i': '·¥â', 'j': '…æ', 'k': ' û', 'l': 'l', 'm': '…Ø', 'n': 'u',
        'o': 'o', 'p': 'd', 'q': 'b', 'r': '…π', 's': 's', 't': ' á', 'u': 'n',
        'v': ' å', 'w': ' ç', 'x': 'x', 'y': ' é', 'z': 'z', ' ': ' '
    };
    const invertido = texto.toLowerCase().split('').reverse().map(char => 
        caracteresMapa[char] || char
    ).join('');
    estilos.push(`Iu å«ù…π á·¥âpo: ${invertido}`);

    return estilos;
}

async function generarSimbolos(texto) {
    const estilos = [];

    // Estilo 1: Texto tachado
    const tachado = texto.split('').map(char => char + '\u0336').join('');
    estilos.push(`TÃ∂aÃ∂cÃ∂hÃ∂aÃ∂dÃ∂oÃ∂: ${tachado}`);

    // Estilo 2: Texto subrayado
    const subrayado = texto.split('').map(char => char + '\u0332').join('');
    estilos.push(`SÃ≤uÃ≤bÃ≤rÃ≤aÃ≤yÃ≤aÃ≤dÃ≤oÃ≤: ${subrayado}`);

    // Estilo 3: Texto con l√≠nea superior
    const lineaSuperior = texto.split('').map(char => char + '\u0305').join('');
    estilos.push(`LÃÖ√≠ÃÖnÃÖeÃÖaÃÖ ÃÖsÃÖuÃÖpÃÖeÃÖrÃÖiÃÖoÃÖrÃÖ: ${lineaSuperior}`);

    // Estilo 4: Texto con c√≠rculos
    const circulado = texto.split('').map(char => {
        const code = char.charCodeAt(0);
        if (code >= 65 && code <= 90) return String.fromCharCode(code - 65 + 0x24B6);
        if (code >= 97 && code <= 122) return String.fromCharCode(code - 97 + 0x24D0);
        if (code >= 48 && code <= 57) return String.fromCharCode(code - 48 + 0x2460);
        return char;
    }).join('');
    estilos.push(`‚í∏‚ìò‚ì°‚ìí‚ì§‚ìõ‚ìê‚ìì‚ìû: ${circulado}`);

    // Estilo 5: Texto con cuadrados
    const cuadrado = texto.split('').map(char => {
        const squares = {
            'A': 'üÑ∞', 'B': 'üÑ±', 'C': 'üÑ≤', 'D': 'üÑ≥', 'E': 'üÑ¥', 'F': 'üÑµ', 'G': 'üÑ∂',
            'H': 'üÑ∑', 'I': 'üÑ∏', 'J': 'üÑπ', 'K': 'üÑ∫', 'L': 'üÑª', 'M': 'üÑº', 'N': 'üÑΩ',
            'O': 'üÑæ', 'P': 'üÑø', 'Q': 'üÖÄ', 'R': 'üÖÅ', 'S': 'üÖÇ', 'T': 'üÖÉ', 'U': 'üÖÑ',
            'V': 'üÖÖ', 'W': 'üÖÜ', 'X': 'üÖá', 'Y': 'üÖà', 'Z': 'üÖâ'
        };
        return squares[char.toUpperCase()] || char;
    }).join('');
    estilos.push(`Cuadrado: ${cuadrado}`);

    // Estilo 6: Texto con decoraci√≥n de estrellas
    const estrellas = `‚ú¶‚úßÔΩ•Ôæü: *‚úßÔΩ•Ôæü:* ${texto} *:ÔΩ•Ôæü‚úß*:ÔΩ•Ôæü‚úß‚ú¶`;
    estilos.push(`Estrellas: ${estrellas}`);

    // Estilo 7: Texto con burbujas
    const burbujas = `‚ó¶‚Ä¢‚óè‚óâ‚úø ${texto} ‚úø‚óâ‚óè‚Ä¢‚ó¶`;
    estilos.push(`Burbujas: ${burbujas}`);

    // Estilo 8: Texto con corazones
    const corazones = `‚ô°‚úß‚Åé‚Å∫À≥‚úß‡ºö ${texto} ‡ºö‚úßÀ≥‚Å∫‚Åé‚úß‚ô°`;
    estilos.push(`Corazones: ${corazones}`);

    // Estilo 9: Texto con flores
    const flores = `‚ùÄ‚úø‚ùÄ‚úø ${texto} ‚úø‚ùÄ‚úø‚ùÄ`;
    estilos.push(`Flores: ${flores}`);

    // Estilo 10: Texto con ondas
    const ondas = `ÔΩû(Ôø£‚ñΩÔø£ÔΩû) ${texto} (ÔΩûÔø£‚ñΩÔø£)ÔΩû`;
    estilos.push(`Ondas: ${ondas}`);

    // Estilo 11: Texto espaciado
    const espaciado = texto.split('').join(' ');
    estilos.push(`E s p a c i a d o: ${espaciado}`);

    // Estilo 12: Texto alternado
    const alternado = texto.split('').map((char, index) => 
        index % 2 === 0 ? char.toLowerCase() : char.toUpperCase()
    ).join('');
    estilos.push(`aLtErNaDo: ${alternado}`);

    // Estilo 13: Texto con s√≠mbolos kawaii
    const kawaii = `(¬¥‚à©ÔΩ°‚Ä¢ ·µï ‚Ä¢ÔΩ°‚à©\`) ‚ô° ${texto} ‚ô° (¬¥‚à©ÔΩ°‚Ä¢ ·µï ‚Ä¢ÔΩ°‚à©\`)`;
    estilos.push(`Kawaii: ${kawaii}`);

    // Estilo 14: Texto con rayos
    const rayos = `‚ö°‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ ${texto} ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ö°`;
    estilos.push(`Rayos: ${rayos}`);

    // Estilo 15: Texto con diamantes
    const diamantes = `‚óä‚ô¶‚óä‚ô¶‚óä ${texto} ‚óä‚ô¶‚óä‚ô¶‚óä`;
    estilos.push(`Diamantes: ${diamantes}`);

    // Estilo 16: Texto con llamas
    const llamas = `üî•üî•üî• ${texto} üî•üî•üî•`;
    estilos.push(`Llamas: ${llamas}`);

    // Estilo 17: Texto con s√≠mbolos musicales
    const musica = `‚ô™‚ô´‚ô™ ${texto} ‚ô™‚ô´‚ô™`;
    estilos.push(`M√∫sica: ${musica}`);

    // Estilo 18: Texto retro
    const retro = `‚ñ¨‚ñ¨Œπ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïêÔ∫§ ${texto} Ô∫§‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïêŒπ‚ñ¨‚ñ¨`;
    estilos.push(`Retro: ${retro}`);

    return estilos;
}
